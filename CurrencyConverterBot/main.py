import telebot
from config import TOKEN, values
from extensions import APIExceptions, UsersRequests

bot = telebot.TeleBot(TOKEN)


def check_validation(text_message):
    if len(text_message) != 3:
        raise APIExceptions('–ù–µ –≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Å–º. /help).')
    else:
        base, quote, amount = text_message
        if base not in values.keys():
            raise APIExceptions(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ <–≤–∞–ª—é—Ç–∞ 1>: "{base}"\n(—Å–º. /values)')
        elif quote not in values.keys():
            raise APIExceptions(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ <–≤–∞–ª—é—Ç–∞ 2>: "{quote}"\n(—Å–º. /values)')
        elif base == quote:
            raise APIExceptions(f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã')
        try:
            float(amount)
        except ValueError:
            raise APIExceptions(f'–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>: –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')


@bot.message_handler(commands=['start', 'help', 'values'])
def answer_command(message):
    if message.text == '/start':
        bot.send_message(message.chat.id, f'–Ø –±–æ—Çü§ñ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã.\n'
                                          f'–í–≤–µ–¥–∏—Ç–µ: <–≤–∞–ª—é—Ç–∞ 1> <–≤–∞–ª—é—Ç–∞ 2> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n'
                                          f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /help\n'
                                          f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç /values\n')
    elif message.text == '/help':
        bot.send_message(message.chat.id, f'–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –≤ –≤–∏–¥–µ <–∏–º—è –≤–∞–ª—é—Ç—ã —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–π '
                                          f'–≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å> <–∏–º—è –≤–∞–ª—é—Ç—ã –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –ø–µ—Ä–≤–æ–π –≤–∞–ª—é—Ç—ã> '
                                          f'<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤–æ–π –≤–∞–ª—é—Ç—ã>. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã –º–æ–∂–Ω–æ '
                                          f'—É–≤–∏–¥–µ—Ç—å –Ω–∞–∂–∞–≤ /values')
    elif message.text == '/values':
        bot.send_message(message.chat.id, f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–∞–ª—é—Ç—ã: {', '.join(list(values.keys()))}")


@bot.message_handler(content_types='text')
def execute_convert(message):
    try:
        text_message = str(message.text).lower().split()
        check_validation(text_message)
        base, quote, amount = text_message
        result_convert = UsersRequests.get_price(base, quote, amount)
    except APIExceptions as e:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n{e}')
    except Exception as e:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n{e}')
    else:
        bot.reply_to(message, result_convert)


bot.infinity_polling()
